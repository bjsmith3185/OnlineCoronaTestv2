{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Brian Smith\\\\Desktop\\\\My_Projects\\\\CoronaTestv2\\\\OnlineCoronaTestv2\\\\components\\\\Symptoms.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { render } from \"react-dom\";\n\nvar Symptoms = /*#__PURE__*/function (_React$Component) {\n  _inherits(Symptoms, _React$Component);\n\n  var _super = _createSuper(Symptoms);\n\n  function Symptoms(props) {\n    var _this;\n\n    _classCallCheck(this, Symptoms);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      symptomList: [\"Sore Throat.\", \"Fatigue.\", \"Hungry for pizza.\", \"Tired of being home.\", \"Body aches.\", \"Empty Wallet.\", \"Sleepy\", \"TBD symptom\", \"Face mask tan\", \"Long hair or mullet\", \"Feeling hot outside\"],\n      theIndex: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Symptoms, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.state.symptomList.array.foreach(function (item, index) {\n        setTimeout(function () {\n          _this2.setState({\n            theIndex: item\n          });\n        }, 3000);\n      });\n    } // myIndex = () => {\n    //     if ( this.index > (this.symptomList.length -1) ) {\n    //         this.index = 0;\n    //     } else {\n    //         this.index++;\n    //     }\n    // }\n    // findSymptom = () => {\n    //     while (1 < 2) {\n    //         setTimeout(() => {\n    //             if ( this.index > 10 ) {\n    //                 this.index = 0;\n    //             } else {\n    //                 this.index++;\n    //             }\n    //         }, 3000);\n    //     }\n    //     return this.symptomList[this.index];\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }, \"New Side Effects Include..\"), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, this.state.theIndex));\n    }\n  }]);\n\n  return Symptoms;\n}(React.Component);\n\nexport default Symptoms;","map":{"version":3,"sources":["C:/Users/Brian Smith/Desktop/My_Projects/CoronaTestv2/OnlineCoronaTestv2/components/Symptoms.js"],"names":["render","Symptoms","props","state","symptomList","theIndex","array","foreach","item","index","setTimeout","setState","React","Component"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,WAAvB;;IAEMC,Q;;;;;AAGF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAG,CACV,cADU,EAEV,UAFU,EAGV,mBAHU,EAIV,sBAJU,EAKV,aALU,EAMV,eANU,EAOV,QAPU,EAQV,aARU,EASV,eATU,EAUV,qBAVU,EAWV,qBAXU,CADL;AAcTC,MAAAA,QAAQ,EAAE;AAdD,KAAb;AAHe;AAoBlB;;;;wCAEmB;AAAA;;AAChB,WAAKF,KAAL,CAAWC,WAAX,CAAuBE,KAAvB,CAA6BC,OAA7B,CAAqC,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAClDC,QAAAA,UAAU,CAAC,YAAM;AACb,UAAA,MAAI,CAACC,QAAL,CAAc;AAACN,YAAAA,QAAQ,EAAEG;AAAX,WAAd;AACH,SAFS,EAEP,IAFO,CAAV;AAGH,OAJD;AAKH,K,CAID;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;6BAGK;AAGL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKL,KAAL,CAAWE,QAAjB,CAHJ,CADJ;AAYH;;;;EAzEsBO,KAAK,CAACC,S;;AA8E7B,eAAeZ,QAAf","sourcesContent":["import { render } from \"react-dom\";\r\n\r\nclass Symptoms extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            symptomList : [\r\n                \"Sore Throat.\",\r\n                \"Fatigue.\",\r\n                \"Hungry for pizza.\",\r\n                \"Tired of being home.\",\r\n                \"Body aches.\",\r\n                \"Empty Wallet.\",\r\n                \"Sleepy\",\r\n                \"TBD symptom\",\r\n                \"Face mask tan\",\r\n                \"Long hair or mullet\",\r\n                \"Feeling hot outside\"\r\n            ],\r\n            theIndex: \"\"\r\n        }\r\n       \r\n    }\r\n  \r\n    componentDidMount() {\r\n        this.state.symptomList.array.foreach((item, index) => {\r\n            setTimeout(() => {\r\n                this.setState({theIndex: item})\r\n            }, 3000)\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    // myIndex = () => {\r\n    //     if ( this.index > (this.symptomList.length -1) ) {\r\n    //         this.index = 0;\r\n    //     } else {\r\n    //         this.index++;\r\n    //     }\r\n    // }\r\n\r\n    // findSymptom = () => {\r\n    //     while (1 < 2) {\r\n    //         setTimeout(() => {\r\n    //             if ( this.index > 10 ) {\r\n    //                 this.index = 0;\r\n    //             } else {\r\n    //                 this.index++;\r\n    //             }\r\n    //         }, 3000);\r\n    //     }\r\n\r\n    //     return this.symptomList[this.index];\r\n    // }\r\n\r\n\r\nrender() {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p>New Side Effects Include..</p>\r\n\r\n            <div>{this.state.theIndex}</div>\r\n\r\n        </div>\r\n    )\r\n        \r\n\r\n\r\n\r\n}\r\n\r\n\r\n}\r\n\r\nexport default Symptoms;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}